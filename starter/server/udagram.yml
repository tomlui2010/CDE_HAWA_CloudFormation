AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: CD12352 - Infrastructure as Code Project - Udagram
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues: [t2.medium,t2.micro,t3.small]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type: String
    Description: AMI ID to be used (Ubuntu Server 22.04 LTS (HVM), SSD Volume Type)
    Default: ami-0aff18ec83b712f05
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${AWS::Region}-VPC"
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access via port 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${AWS::Region}-VPC"
  WebAppLaunchConfig:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:        
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            apt-get install -y nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx
            sudo snap install aws-cli --classic 
            aws configure set default.region us-west-2
            cd /var/www/html
            aws s3 cp s3://$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'web-app-s3-bucket')].Name | [0]" --output text)/index.html /tmp
            sudo mv /tmp/index.html .
            sudo chmod 644 /var/www/html/index.html
            sudo systemctl daemon-reload
            sudo systemctl restart nginx            
        ImageId: !Ref 'LatestAmiId'
        KeyName: !Ref 'KeyName'
        SecurityGroupIds:
        - Ref: InstanceSecurityGroup
        InstanceType: !Ref 'InstanceType'
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '12'
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${AWS::Region}-PrivateSubnet1"
      - Fn::ImportValue: 
          !Sub "${AWS::Region}-PrivateSubnet2"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchConfig
        Version: !GetAtt WebAppLaunchConfig.LatestVersionNumber
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "ApplicationLoadBalancer"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
        - Fn::ImportValue: !Sub "${AWS::Region}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${AWS::Region}-PublicSubnet2"
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes: 
        - 
          Key: "access_logs.s3.enabled"
          Value: "false"
        - 
          Key: "idle_timeout.timeout_seconds"
          Value: "120"
        - 
          Key: "deletion_protection.enabled"
          Value: "false"
        - 
          Key: "routing.http2.enabled"
          Value: "true"
        - 
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'HTTPListener'
      Priority: 1
  WebAppTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: WebAppTargetGroupFinal
      VpcId:
          Fn::ImportValue:
            !Sub "${AWS::Region}-VPC"
      TargetType: "instance"
      Port: 80
      Protocol: "HTTP"
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/index.html"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher: 
          HttpCode: "200-299"
      TargetGroupAttributes: 
        - 
          Key: "stickiness.enabled"
          Value: "false"
        - 
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - 
          Key: "stickiness.type"
          Value: "lb_cookie"
        - 
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - 
          Key: "slow_start.duration_seconds"
          Value: "0"
        - 
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'InstanceRole']
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: S3Download-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 's3:*'
              - 's3-object-lambda:*'
            Resource: "*"
      - PolicyName: SSMReadOnly
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - 'ssm:Describe*'
              - 'ssm:Get*'
              - 'ssm:List*'
            Resource: 
              !Sub 'arn:aws:ssm:us-west-2:${AWS::AccountId}:parameter/*'
  JumpBoxEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds: 
        - !GetAtt [JumpBoxEC2InstanceSecurityGroup,GroupId]
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${AWS::Region}-PublicSubnet1"
  JumpBoxEC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      VpcId: 
        Fn::ImportValue:
          !Sub "${AWS::Region}-VPC"

Outputs:        
  ALBURL:
      Description: Loadbalancer url
      Value: !Join ['', ['http://', !GetAtt [ApplicationLoadBalancer, DNSName]]]
  JumpBoxInstanceId:
    Description: InstanceId of the newly created JumpBox
    Value: !Ref 'JumpBoxEC2Instance'
